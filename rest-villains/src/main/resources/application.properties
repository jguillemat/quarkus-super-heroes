quarkus.application.name=rest-villains

## HTTP configuration
quarkus.http.port=8084
quarkus.http.test-port=0
quarkus.jackson.serialization-inclusion=non-empty

# drop and create the database at startup (use `update` to only update the schema or 'validate' to only validate the schema)
quarkus.hibernate-orm.database.generation=drop-and-create

# Villain service specific properties (see io.quarkus.sample.superheroes.villain.config.VillainConfig)
villain.level.multiplier=0.5
%test.villain.level.multiplier=1

## Logging configuration
quarkus.log.category."io.quarkus.sample.superheroes".level=DEBUG
quarkus.log.level=INFO
%dev.quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
%test.quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
quarkus.log.console.darken=1
%dev.quarkus.log.console.level=DEBUG
%test.quarkus.log.console.level=DEBUG

# OpenTelemetry
quarkus.otel.resource.attributes=app=${quarkus.application.name},application=villains-service,system=quarkus-super-heroes
quarkus.otel.exporter.otlp.traces.endpoint=http://otel-collector:4317
quarkus.datasource.jdbc.telemetry=true

## CORS
quarkus.http.cors=true
quarkus.http.cors.origins=*

# prod configuration
%prod.quarkus.hibernate-orm.sql-load-script=import.sql

# OpenAPI
quarkus.smallrye-openapi.info-title=Villain API
quarkus.smallrye-openapi.info-description=This API allows CRUD operations on a villain
quarkus.smallrye-openapi.info-version=1.0
quarkus.smallrye-openapi.info-contact-name=Quarkus
quarkus.smallrye-openapi.info-contact-url=https://github.com/quarkusio
quarkus.swagger-ui.always-include=true

# Container image
quarkus.container-image.builder=docker
quarkus.container-image.registry=quay.io
quarkus.container-image.group=quarkus-super-heroes
quarkus.container-image.name=${quarkus.application.name}

# Kubernetes
%kubernetes.quarkus.config.profile.parent=prod
%kubernetes.quarkus.kubernetes.deployment-target=kubernetes
quarkus.kubernetes.part-of=villains-service
quarkus.kubernetes.annotations."app.openshift.io/connects-to"=villains-db,otel-collector
quarkus.kubernetes.env.configmaps=${quarkus.application.name}-config
quarkus.kubernetes.env.secrets=${quarkus.application.name}-config-creds
quarkus.kubernetes.labels.app=${quarkus.application.name}
quarkus.kubernetes.labels.application=${quarkus.kubernetes.part-of}
quarkus.kubernetes.labels.system=quarkus-super-heroes

# OpenShift
%openshift.quarkus.config.profile.parent=prod
%openshift.quarkus.kubernetes.deployment-target=openshift
%openshift.quarkus.container-image.builder=openshift
quarkus.openshift.base-jvm-image=registry.access.redhat.com/ubi9/openjdk-17:1.14
quarkus.openshift.base-native-image=quay.io/quarkus/ubi-quarkus-native-binary-s2i:2.0
quarkus.openshift.part-of=${quarkus.kubernetes.part-of}
quarkus.openshift.route.expose=true
quarkus.openshift.annotations."app.openshift.io/connects-to"=villains-db,otel-collector
quarkus.openshift.env.configmaps=${quarkus.kubernetes.env.configmaps}
quarkus.openshift.env.secrets=${quarkus.kubernetes.env.secrets}
quarkus.openshift.labels.app=${quarkus.kubernetes.labels.app}
quarkus.openshift.labels.application=${quarkus.kubernetes.labels.application}
quarkus.openshift.labels.system=${quarkus.kubernetes.labels.system}

# KNative
%knative.quarkus.config.profile.parent=prod
%knative.quarkus.kubernetes.deployment-target=knative
quarkus.knative.part-of=${quarkus.kubernetes.part-of}
quarkus.knative.annotations."app.openshift.io/connects-to"=villains-db,otel-collector
quarkus.knative.env.configmaps=${quarkus.kubernetes.env.configmaps}
quarkus.knative.env.secrets=${quarkus.kubernetes.env.secrets}
quarkus.knative.labels.app=${quarkus.kubernetes.labels.app}
quarkus.knative.labels.application=${quarkus.kubernetes.labels.application}
quarkus.knative.labels.system=${quarkus.kubernetes.labels.system}

# KNative on OpenShift
%knative-openshift.quarkus.config.profile.parent=knative
%knative-openshift.quarkus.container-image.builder=openshift

# Minikube
%minikube.quarkus.config.profile.parent=prod
%minikube.quarkus.kubernetes.deployment-target=minikube

# Helm
## Version labels
quarkus.helm.values."version".paths=\
  (metadata.labels.app == ${quarkus.application.name}).*.labels.'app.kubernetes.io/version',\
  (metadata.labels.app == ${quarkus.application.name}).*.selector.'app.kubernetes.io/version',\
  (metadata.labels.app == ${quarkus.application.name}).*.matchLabels.'app.kubernetes.io/version',\
  (kind == Role).metadata.'app.kubernetes.io/version',\
  (kind == RoleBinding).metadata.'app.kubernetes.io/version'

## Memory limits
quarkus.helm.values."resources.limits.memory".paths=\
  (metadata.labels.app == ${quarkus.application.name}).*.resources.limits.memory
quarkus.helm.values."resources.requests.memory".paths=\
  (metadata.labels.app == ${quarkus.application.name}).*.resources.requests.memory

# OpenShift ImageStreams
quarkus.helm.expressions.0.path=\
  (kind == DeploymentConfig && metadata.labels.app == ${quarkus.application.name}).spec.template.spec.containers.(name == ${quarkus.application.name}).image
quarkus.helm.expressions.0.expression=\
  ${quarkus.application.name}:{{ .Values.app.version }}

# OpenShift triggers
quarkus.helm.expressions.1.path=\
  (kind == DeploymentConfig && metadata.labels.app == ${quarkus.application.name}).spec.triggers.imageChangeParams.from.name
quarkus.helm.expressions.1.expression=\
  ${quarkus.application.name}:{{ .Values.app.version }}

# K8S Deployment Image & KNative Service Image
quarkus.helm.expressions.2.path=\
  (kind == Deployment && metadata.labels.app == ${quarkus.application.name}).spec.template.spec.containers.(name == ${quarkus.application.name}).image
quarkus.helm.expressions.2.expression=\
  ${quarkus.container-image.registry}/${quarkus.container-image.group}/${quarkus.container-image.name}:{{ .Values.app.version }}

quarkus.helm.expressions.3.path=\
  (kind == Service && metadata.labels.app == ${quarkus.application.name}).spec.template.spec.containers.(name == ${quarkus.application.name}).image
quarkus.helm.expressions.3.expression=\
  ${quarkus.container-image.registry}/${quarkus.container-image.group}/${quarkus.container-image.name}:{{ .Values.app.version }}




