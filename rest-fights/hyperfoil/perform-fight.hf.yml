# This Hyperfoil benchmark performs a "Perform fight" operation, which runs a sequence of requests in each iteration:
# 1) Perform a GET to /api/fights/randomfighters to retrieve random fighters, storing the result in a variable
# 2) Pause to look at the fighters (as a human user might)
# 3) Perform a POST to /api/fights to perform the fight, sending the result from step 1 as the request body

# Here is a list of all the parameters and their default values that can be adjusted when running:
#
# FIGHT_PROTOCOL=http (The protocol used by the benchmark)
# FIGHT_HOST=localhost (The host the rest-fights application is running on)
# FIGHT_PORT=8082 (The port the rest-fights application is running on)
# SHARED_CONNECTIONS=400 (The number of connections to share across the requests)
# USERS_PER_SEC=20 (The number of users per second)
# MAX_SESSIONS=200 (The maximum number of hyperfoil sessions to make available)
# DURATION=3m (The duration to run the benchmark)
# PAUSE_TIME_DURATION=3s (The duration to pause, as described in step 2 of the workflow)

name: perform-fight
http:
  - protocol: !param FIGHT_PROTOCOL http
    host: !param FIGHT_HOST localhost
    port: !param FIGHT_PORT 8082
    name: fights-host
    sharedConnections: !param SHARED_CONNECTIONS 400

phases:
  - performFight:
      constantRate:
        startAfter: warmUp
        usersPerSec: !param USERS_PER_SEC 20
        maxSessions: !param MAX_SESSIONS 200
        duration: !param DURATION 3m
        scenario:
          # This is written using initialSequences because of https://github.com/Hyperfoil/Hyperfoil/issues/311
          # Although something still seems to be wrong because the phase never terminates upon execution.
          initialSequences:
            - getRandomFighters:
                - httpRequest:
                    GET: /api/fights/randomfighters
                    headers:
                      accept: application/json
                    handler:
                      body:
                        - json:
                            query: .
                            format: BYTES
                            toVar: randomFighters
            - pauseToLookAtFighters:
                - thinkTime:
                    duration: !param PAUSE_TIME_DURATION 3s
          sequences:
            - doFight:
                - httpRequest:
                    POST: /api/fights
                    headers:
                      content-type: application/json
                      accept: application/json
                    body:
                      fromVar: randomFighters

  - warmUp:
      always:
        users: 10
        duration: 10s
        scenario:
          - getRandomFighters:
              - httpRequest:
                  GET: /api/fights/randomfighters
                  headers:
                    accept: application/json
