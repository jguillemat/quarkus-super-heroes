@startuml
!define AzurePuml https://raw.githubusercontent.com/plantuml-stdlib/Azure-PlantUML/release/2-2/dist
!includeurl AzurePuml/AzureCommon.puml
!includeurl AzurePuml/Databases/AzureCosmosDb.puml
!includeurl AzurePuml/Databases/AzureDatabaseForPostgreSQL.puml
!includeurl AzurePuml/Analytics/AzureEventHub.puml
!includeurl AzurePuml/AIMachineLearning/AzureCognitiveServices.puml
!include <logos/angular>
!include <logos/prometheus>
!include style.puml

skinparam NodePadding 40
skinparam dpi 100

left to right direction

together {
    node "Super Hero UI" as ui {
      agent "<$angular>" <<frontend>> as angularUi
      agent "Quarkus" <<application>> as uiQuarkus
      angularUi .up> uiQuarkus
    }

    node "<$prometheus>" as prometheus {
    }
}

node "Fight" <<AzureContainerApp>> as fight {
    agent "Quarkus" <<application>> as fightQuarkus
    AzureCosmosDb(fightMongoDb, "FightsDB", "")
    fightQuarkus .up> fightMongoDb
}

node "Narration" <<AzureContainerApp>> as narration {
  agent "Quarkus (reactive)" <<application>> as narrationQuarkus
  hexagon "Microsoft\nSemantic Kernel" as sk
  narrationQuarkus .up> sk
}

AzureCognitiveServices(openai, "OpenAI\nAzure OpenAI", "")

node "Hero" <<AzureContainerApp>> as hero {
    agent "Quarkus (reactive)" <<application>> as heroQuarkus
    AzureDatabaseForPostgreSQL(heroPostgresql, "HeroesDB", "")
    heroQuarkus .up> heroPostgresql
}

node "Villain" <<AzureContainerApp>> as villain {
    agent "Quarkus (imperative)" <<application>> as villainQuarkus
    AzureDatabaseForPostgreSQL(villainPostgresql, "VillansDB", "")
    villainQuarkus .up> villainPostgresql
}

together {
  AzureEventHub(kafka, "Kafka", "")

  node "Apicurio" <<schema-registry>> as apicurio {
  }
}

package "stats" <<AzureContainerApp>> {
    node "Statistics" as stat {
        agent "HTML+JQuery" <<frontend>> as statUI
        agent "Quarkus (reactive event-driven)" <<application>> as statQuarkus
        statUI .up> statQuarkus
    }

    node "Statistics UI" as statUi {
            agent "Browser" <<frontend>> as uiStats
    }
}

angularUi --> fightQuarkus : HTTP
fightQuarkus --> narrationQuarkus : HTTP
fightQuarkus --> villainQuarkus : HTTP
fightQuarkus --> heroQuarkus : HTTP

sk --> openai : HTTP

fightQuarkus ..> kafka : Message
fightQuarkus -[dotted]-> apicurio : HTTP

statQuarkus <.. kafka : Message
statQuarkus -[dotted]-> apicurio : HTTP
statQuarkus ..> uiStats : Web Sockets

prometheus .> fight : polling
prometheus .> narration : polling
prometheus .> hero : polling
prometheus .> villain : polling
prometheus .> stat : polling
@enduml
