quarkus:
  application:
    name: rest-heroes
  log:
    level: INFO
    category:
      "io.quarkus.sample.superheroes":
        level: DEBUG
    console:
      format: "%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n"
      level: INFO
      darken: 1
  otel:
    resource:
      attributes: "app=${quarkus.application.name},application=heroes-service,system=quarkus-super-heroes"
    exporter:
      otlp:
        traces:
          endpoint: http://localhost:4317
  hibernate-orm:
    database:
      generation: drop-and-create
  http:
    cors:
      ~: true
      origins: "*"
    port: 8083
    test-port: 0
  jackson:
    serialization-inclusion: non-empty
  smallrye-openapi:
    info-title: Hero API
    info-description: This API allows CRUD operations on a hero
    info-version: 1.0
    info-contact-name: Quarkus
    info-contact-url: https://github.com/quarkusio
  swagger-ui:
    always-include: true
  container-image:
    builder: docker
    registry: quay.io
    group: quarkus-super-heroes
    name: "${quarkus.application.name}"
  kubernetes:
    part-of: heroes-service
    annotations:
      "app.openshift.io/connects-to": heroes-db,otel-collector
    env:
      configmaps: "${quarkus.application.name}-config"
      secrets: "${quarkus.application.name}-config-creds"
    labels:
      app: "${quarkus.application.name}"
      application: "${quarkus.kubernetes.part-of}"
      system: quarkus-super-heroes
  openshift:
    base-jvm-image: registry.access.redhat.com/ubi9/openjdk-17:1.14
    base-native-image: quay.io/quarkus/ubi-quarkus-native-binary-s2i:2.0
    part-of: "${quarkus.kubernetes.part-of}"
    route:
      expose: true
    annotations:
      "app.openshift.io/connects-to": heroes-db,otel-collector
    env:
      configmaps: "${quarkus.kubernetes.env.configmaps}"
      secrets: "${quarkus.kubernetes.env.secrets}"
    labels:
      app: "${quarkus.kubernetes.labels.app}"
      application: "${quarkus.openshift.part-of}"
      system: "${quarkus.kubernetes.labels.system}"
  knative:
    part-of: "${quarkus.kubernetes.part-of}"
    annotations:
      "app.openshift.io/connects-to": heroes-db,otel-collector
    env:
      configmaps: "${quarkus.kubernetes.env.configmaps}"
      secrets: "${quarkus.kubernetes.env.secrets}"
    labels:
      app: "${quarkus.kubernetes.labels.app}"
      application: "${quarkus.openshift.part-of}"
      system: "${quarkus.kubernetes.labels.system}"
  helm:
    values:
      "version":
         paths: "(metadata.labels.app == ${quarkus.application.name}).*.labels.'app.kubernetes.io/version',(metadata.labels.app == ${quarkus.application.name}).*.selector.'app.kubernetes.io/version',(metadata.labels.app == ${quarkus.application.name}).*.matchLabels.'app.kubernetes.io/version',(kind == Role).metadata.'app.kubernetes.io/version',(kind == RoleBinding).metadata.'app.kubernetes.io/version'"
      "resources.requests.memory":
         paths: "(metadata.labels.app == ${quarkus.application.name}).*.resources.requests.memory"
      "resources.limits.memory":
         paths: "(metadata.labels.app == ${quarkus.application.name}).*.resources.limits.memory"
    expressions:
      '0':
        path: "(kind == DeploymentConfig && metadata.labels.app == ${quarkus.application.name}).spec.template.spec.containers.(name == ${quarkus.application.name}).image"
        expression: "${quarkus.application.name}:{{ .Values.app.version }}"
      '1':
        path: "(kind == DeploymentConfig && metadata.labels.app == ${quarkus.application.name}).spec.triggers.imageChangeParams.from.name"
        expression: "${quarkus.application.name}:{{ .Values.app.version }}"
      '2':
        path: "(kind == Deployment && metadata.labels.app == ${quarkus.application.name}).spec.template.spec.containers.(name == ${quarkus.application.name}).image"
        expression: "${quarkus.container-image.registry}/${quarkus.container-image.group}/${quarkus.container-image.name}:{{ .Values.app.version }}"
      '3':
        path: "(kind == Service && metadata.labels.app == ${quarkus.application.name}).spec.template.spec.containers.(name == ${quarkus.application.name}).image"
        expression: "${quarkus.container-image.registry}/${quarkus.container-image.group}/${quarkus.container-image.name}:{{ .Values.app.version }}"

"%dev":
  quarkus:
    log:
      console:
        format: "%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n"
        level: DEBUG

"%test":
  quarkus:
    log:
      console:
        format: "%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n"
        level: DEBUG

"%prod":
  quarkus:
    hibernate-orm:
      sql-load-script: import.sql

"%kubernetes":
  quarkus:
    config:
      profile:
        parent: prod
    kubernetes:
      deployment-target: kubernetes

"%openshift":
  quarkus:
    config:
      profile:
        parent: prod
    container-image:
      builder: openshift
    kubernetes:
      deployment-target: openshift

"%knative":
  quarkus:
    config:
      profile:
        parent: prod
    kubernetes:
      deployment-target: knative

"%knative-openshift":
  quarkus:
    config:
      profile:
        parent: knative
    container-image:
      builder: openshift

"%minikube":
  quarkus:
    config:
      profile:
        parent: prod
    kubernetes:
      deployment-target: minikube
